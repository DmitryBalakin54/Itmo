package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.AbstractRepository;
import ru.itmo.wp.model.repository.EventRepository;

import java.sql.*;
import java.util.Map;

public class EventRepositoryImpl extends AbstractRepository<Event> implements EventRepository {
    @Override
    protected Event toEntity(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        Event event = new Event();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    event.setId(resultSet.getLong(i));
                    break;
                case "userId":
                    event.setUserId(resultSet.getLong(i));
                    break;
                case "creationTime":
                    event.setCreationTime(resultSet.getTimestamp(i));
                    break;
                case "type":
                    event.setType(Event.EventType.valueOf(resultSet.getString(i)));
                    break;
                default:
                    // No operations.
            }
        }

        return event;
    }

    @Override
    protected String getTableName() {
        return "Event";
    }

    @Override
    protected String getSaveQuery() {
        return "INSERT INTO `Event` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())";
    }

    @Override
    protected void setSaveStatementParams(PreparedStatement statement, Event event, Map<String, Object> params) throws SQLException {
        statement.setLong(1, event.getUserId());
        statement.setString(2, event.getTypeName());
    }

    @Override
    protected void setGeneratedIdAndTime(Event event, long generatedId) throws SQLException {
        event.setId(generatedId);
        event.setCreationTime(find(generatedId).getCreationTime());
    }

    @Override
    public void save(Event event) {
        save(event, Map.of());
    }

//    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
//
//    @Override
//    public void save(Event event) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement(
//                    "INSERT INTO `Event` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())",
//                    Statement.RETURN_GENERATED_KEYS
//            )) {
//
//                statement.setLong(1, event.getUserId());
//                statement.setString(2, event.getTypeName());
//                if (statement.executeUpdate() != 1) {
//                    throw new RepositoryException("Can't save Event.");
//                } else {
//                    ResultSet generatedKeys = statement.getGeneratedKeys();
//                    if (generatedKeys.next()) {
//                        event.setId(generatedKeys.getLong(1));
//                        event.setCreationTime(find(event.getId()).getCreationTime());
//                    } else {
//                        throw new RepositoryException("Can't save Event [no autogenerated fields].");
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't save Event.", e);
//        }
//    }
//
//    @Override
//    public Event find(long id) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Event WHERE id=?")) {
//                statement.setLong(1, id);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return toEvent(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Event.", e);
//        }
//    }
//
//    @Override
//    public List<Event> findAll() {
//        List<Event> events = new ArrayList<>();
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Event ORDER BY id DESC")) {
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    Event event;
//                    while ((event = toEvent(statement.getMetaData(), resultSet)) != null) {
//                        events.add(event);
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Event.", e);
//        }
//        return events;
//    }
//
//    private Event toEvent(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
//        if (!resultSet.next()) {
//            return null;
//        }
//
//        Event event = new Event();
//        for (int i = 1; i <= metaData.getColumnCount(); i++) {
//            switch (metaData.getColumnName(i)) {
//                case "id":
//                    event.setId(resultSet.getLong(i));
//                    break;
//                case "userId":
//                    event.setUserId(resultSet.getLong(i));
//                    break;
//                case "creationTime":
//                    event.setCreationTime(resultSet.getTimestamp(i));
//                    break;
//                case "type":
//                    event.setType(Event.EventType.valueOf(resultSet.getString(i)));
//                    break;
//                default:
//                    // No operations.
//            }
//        }
//
//        return event;
//    }
}
